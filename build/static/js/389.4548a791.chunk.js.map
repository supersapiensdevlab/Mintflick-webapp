{"version":3,"file":"static/js/389.4548a791.chunk.js","mappings":"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","sources":["../node_modules/@metamask/detect-provider/src/index.ts","../node_modules/@web3auth/metamask-adapter/src/metamaskAdapter.ts"],"sourcesContent":["interface MetaMaskEthereumProvider {\n  isMetaMask?: boolean;\n  once(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  on(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  off(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  addListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeListener(eventName: string | symbol, listener: (...args: any[]) => void): this;\n  removeAllListeners(event?: string | symbol): this;\n}\n\ninterface Window {\n  ethereum?: MetaMaskEthereumProvider;\n}\n\nexport = detectEthereumProvider;\n\n/**\n * Returns a Promise that resolves to the value of window.ethereum if it is\n * set within the given timeout, or null.\n * The Promise will not reject, but an error will be thrown if invalid options\n * are provided.\n *\n * @param options - Options bag.\n * @param options.mustBeMetaMask - Whether to only look for MetaMask providers.\n * Default: false\n * @param options.silent - Whether to silence console errors. Does not affect\n * thrown errors. Default: false\n * @param options.timeout - Milliseconds to wait for 'ethereum#initialized' to\n * be dispatched. Default: 3000\n * @returns A Promise that resolves with the Provider if it is detected within\n * given timeout, otherwise null.\n */\nfunction detectEthereumProvider<T = MetaMaskEthereumProvider>({\n  mustBeMetaMask = false,\n  silent = false,\n  timeout = 3000,\n} = {}): Promise<T | null> {\n\n  _validateInputs();\n\n  let handled = false;\n\n  return new Promise((resolve) => {\n    if ((window as Window).ethereum) {\n\n      handleEthereum();\n\n    } else {\n\n      window.addEventListener(\n        'ethereum#initialized',\n        handleEthereum,\n        { once: true },\n      );\n\n      setTimeout(() => {\n        handleEthereum();\n      }, timeout);\n    }\n\n    function handleEthereum() {\n\n      if (handled) {\n        return;\n      }\n      handled = true;\n\n      window.removeEventListener('ethereum#initialized', handleEthereum);\n\n      const { ethereum } = window as Window;\n\n      if (ethereum && (!mustBeMetaMask || ethereum.isMetaMask)) {\n        resolve(ethereum as unknown as T);\n      } else {\n\n        const message = mustBeMetaMask && ethereum\n          ? 'Non-MetaMask window.ethereum detected.'\n          : 'Unable to detect window.ethereum.';\n\n        !silent && console.error('@metamask/detect-provider:', message);\n        resolve(null);\n      }\n    }\n  });\n\n  function _validateInputs() {\n    if (typeof mustBeMetaMask !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'mustBeMetaMask' to be a boolean.`);\n    }\n    if (typeof silent !== 'boolean') {\n      throw new Error(`@metamask/detect-provider: Expected option 'silent' to be a boolean.`);\n    }\n    if (typeof timeout !== 'number') {\n      throw new Error(`@metamask/detect-provider: Expected option 'timeout' to be a number.`);\n    }\n  }\n}\n","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport interface MetamaskAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private rehydrated = false;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  constructor(adapterOptions: MetamaskAdapterOptions) {\n    super(adapterOptions);\n    this.chainConfig = adapterOptions?.chainConfig || null;\n    this.sessionTime = adapterOptions?.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    // set default to mainnet\n    if (!this.chainConfig) this.chainConfig = getChainConfig(CHAIN_NAMESPACES.EIP155, 1);\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.rehydrated = false;\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [{ chainId: chainConfig.chainId, chainName: chainConfig.displayName, rpcUrls: [chainConfig.rpcTarget] }],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n"],"names":["module","mustBeMetaMask","silent","timeout","_validateInputs","handled","Promise","resolve","handleEthereum","window","removeEventListener","ethereum","isMetaMask","message","console","error","addEventListener","once","setTimeout","Error","MetamaskAdapter","_inherits","adapterOptions","_classCallCheck","_this","_defineProperty","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","WALLET_ADAPTERS","ADAPTER_STATUS","chainConfig","sessionTime","_createClass","key","get","this","status","metamaskProvider","set","_","value","options","_get","_context","detectEthereumProvider","WalletInitializationError","emit","ADAPTER_EVENTS","log","autoConnect","rehydrated","connect","clientId","_connect","getChainConfig","adapter","_context2","WalletLoginError","request","method","chainId","switchChain","provider","_this2","disconnect","reconnected","_disconnect","_args3","cleanup","_context3","removeAllListeners","_getUserInfo","_context4","_context5","params","code","chainName","displayName","rpcUrls","rpcTarget","BaseEvmAdapter"],"sourceRoot":""}