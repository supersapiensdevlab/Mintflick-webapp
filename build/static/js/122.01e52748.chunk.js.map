{"version":3,"file":"static/js/122.01e52748.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/phantom-adapter/src/utils.ts","../node_modules/@web3auth/phantom-adapter/src/phantomAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import type { IPhantomWalletProvider } from \"@web3auth/solana-provider\";\n\nexport function poll(callback: () => boolean | Promise<boolean>, interval: number, count: number): Promise<boolean> {\n  return new Promise((resolve, reject) => {\n    if (count > 0) {\n      setTimeout(async () => {\n        const done = await callback();\n        if (done) resolve(done);\n        if (!done)\n          poll(callback, interval, count - 1)\n            .then((res) => {\n              resolve(res);\n              return res;\n            })\n            .catch((err) => reject(err));\n      }, interval);\n    } else {\n      resolve(false);\n    }\n  });\n}\n\nexport const detectProvider = async (\n  options: { interval: number; count: number } = { interval: 1000, count: 3 }\n): Promise<IPhantomWalletProvider | null> => {\n  const isPhantomAvailable = typeof window !== \"undefined\" && !!(window as any).solana?.isPhantom;\n  if (isPhantomAvailable) {\n    return (window as any).solana;\n  }\n  const isAvailable = await poll(() => (window as any).solana?.isPhantom, options.interval, options.count);\n  if (isAvailable) return (window as any).solana;\n  return null;\n};\n","import {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { IPhantomWalletProvider, PhantomInjectedProvider } from \"@web3auth/solana-provider\";\n\nimport { detectProvider } from \"./utils\";\nexport interface PhantomAdapterOptions {\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class PhantomAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.PHANTOM;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public _wallet: IPhantomWalletProvider | null = null;\n\n  private phantomProvider: PhantomInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(options: PhantomAdapterOptions) {\n    super(options);\n    this.chainConfig = options?.chainConfig || null;\n    this.sessionTime = options?.sessionTime || 86400;\n  }\n\n  get isWalletConnected(): boolean {\n    return !!(this._wallet?.isConnected && this.status === ADAPTER_STATUS.CONNECTED);\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    return this.phantomProvider?.provider || null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n    }\n    this._wallet = await detectProvider({ interval: 500, count: 3 });\n    if (!this._wallet) throw WalletInitializationError.notInstalled();\n    this.phantomProvider = new PhantomInjectedProvider({ config: { chainConfig: this.chainConfig as CustomChainConfig } });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.PHANTOM);\n\n    try {\n      log.debug(\"initializing phantom adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached phantom provider\", error);\n      this.emit(\"ERRORED\", error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    try {\n      super.checkConnectionRequirements();\n      this.status = ADAPTER_STATUS.CONNECTING;\n      this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.PHANTOM });\n\n      if (!this._wallet) throw WalletInitializationError.notInstalled();\n      if (!this._wallet.isConnected) {\n        const handleDisconnect = this._wallet._handleDisconnect;\n        try {\n          await new Promise<SafeEventEmitterProvider | null>((resolve, reject) => {\n            const connect = async () => {\n              await this.connectWithProvider(this._wallet as IPhantomWalletProvider);\n              resolve(this.provider);\n            };\n            if (!this._wallet) return reject(WalletInitializationError.notInstalled());\n            this._wallet.once(\"connect\", connect);\n            // Raise an issue on phantom that if window is closed, disconnect event is not fired\n            (this._wallet as IPhantomWalletProvider)._handleDisconnect = (...args: unknown[]) => {\n              reject(WalletInitializationError.windowClosed());\n              return handleDisconnect.apply(this._wallet, args);\n            };\n\n            this._wallet.connect().catch((reason: unknown) => {\n              reject(reason);\n            });\n          });\n        } catch (error: unknown) {\n          if (error instanceof Web3AuthError) throw error;\n          throw WalletLoginError.connectionError((error as Error)?.message);\n        } finally {\n          this._wallet._handleDisconnect = handleDisconnect;\n        }\n      } else {\n        await this.connectWithProvider(this._wallet);\n      }\n\n      if (!this._wallet.publicKey) throw WalletLoginError.connectionError();\n      this._wallet.on(\"disconnect\", this._onDisconnect);\n\n      return this.provider;\n    } catch (error: unknown) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw error;\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnect();\n    try {\n      await this._wallet?.disconnect();\n      if (options.cleanup) {\n        this.status = ADAPTER_STATUS.NOT_READY;\n        this.phantomProvider = null;\n        this._wallet = null;\n      }\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    } catch (error: unknown) {\n      this.emit(ADAPTER_EVENTS.ERRORED, WalletLoginError.disconnectionError((error as Error)?.message));\n    }\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (!this.isWalletConnected) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async connectWithProvider(injectedProvider: IPhantomWalletProvider): Promise<SafeEventEmitterProvider | null> {\n    if (!this.phantomProvider) throw WalletLoginError.connectionError(\"No phantom provider\");\n    await this.phantomProvider.setupProvider(injectedProvider);\n    this.status = ADAPTER_STATUS.CONNECTED;\n    this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.PHANTOM, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n    return this.provider;\n  }\n\n  private _onDisconnect = () => {\n    if (this._wallet) {\n      this._wallet.off(\"disconnect\", this._onDisconnect);\n      this.rehydrated = false;\n      // ready to be connected again only if it was previously connected and not cleaned up\n      this.status = this.status === ADAPTER_STATUS.CONNECTED ? ADAPTER_STATUS.READY : ADAPTER_STATUS.NOT_READY;\n      this.emit(ADAPTER_EVENTS.DISCONNECTED);\n    }\n  };\n}\n"],"names":["BaseSolanaAdapter","_inherits","params","arguments","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","encodedMessage","TextEncoder","encode","message","display","signedMessage","verifySignedChallenge","bs58","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","poll","callback","interval","count","Promise","resolve","reject","setTimeout","_asyncToGenerator","done","then","res","catch","err","detectProvider","_ref2","_args2","options","solana","_window$solana","isPhantom","_window$solana2","PhantomAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","_wallet","off","_onDisconnect","rehydrated","emit","ADAPTER_EVENTS","get","_this$_wallet","isConnected","phantomProvider","_this$phantomProvider","set","_","Error","_get","getChainConfig","WalletInitializationError","PhantomInjectedProvider","config","log","autoConnect","connect","_connect","_context3","adapter","handleDisconnect","_handleDisconnect","_ref","_this2","connectWithProvider","once","args","apply","reason","Web3AuthError","publicKey","on","_this$_wallet2","_args4","cleanup","_context4","disconnect","_getUserInfo","isWalletConnected","_context5","injectedProvider","_context6","setupProvider","reconnected"],"sourceRoot":""}