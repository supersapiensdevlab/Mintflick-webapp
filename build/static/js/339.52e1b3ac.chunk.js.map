{"version":3,"file":"static/js/339.52e1b3ac.chunk.js","mappings":"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","sources":["../node_modules/@web3auth/base-solana-adapter/src/baseSolanaAdapter.ts","../node_modules/@web3auth/torus-solana-adapter/src/solanaWalletAdapter.ts"],"sourcesContent":["import {\n  ADAPTER_STATUS,\n  BaseAdapter,\n  checkIfTokenIsExpired,\n  clearToken,\n  getSavedToken,\n  saveToken,\n  signChallenge,\n  UserAuthInfo,\n  verifySignedChallenge,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport bs58 from \"bs58\";\n\nexport abstract class BaseSolanaAdapter<T> extends BaseAdapter<T> {\n  public clientId: string;\n\n  constructor(params: { clientId?: string } = {}) {\n    super();\n    this.clientId = params.clientId;\n  }\n\n  async authenticateUser(): Promise<UserAuthInfo> {\n    if (!this.provider || !this.chainConfig?.chainId) throw WalletLoginError.notConnectedError();\n\n    const { chainNamespace, chainId } = this.chainConfig;\n\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      const existingToken = getSavedToken(accounts[0] as string, this.name);\n      if (existingToken) {\n        const isExpired = checkIfTokenIsExpired(existingToken);\n        if (!isExpired) {\n          return { idToken: existingToken };\n        }\n      }\n\n      const payload = {\n        domain: window.location.origin,\n        uri: window.location.href,\n        address: accounts[0],\n        chainId: parseInt(chainId, 16),\n        version: \"1\",\n        nonce: Math.random().toString(36).slice(2),\n        issuedAt: new Date().toISOString(),\n      };\n\n      const challenge = await signChallenge(payload, chainNamespace);\n      const encodedMessage = new TextEncoder().encode(challenge);\n      const signedMessage = await this.provider.request<Uint8Array>({\n        method: \"signMessage\",\n        params: {\n          message: encodedMessage,\n          display: \"utf8\",\n        },\n      });\n      const idToken = await verifySignedChallenge(\n        chainNamespace,\n        bs58.encode(signedMessage as Uint8Array),\n        challenge,\n        this.name,\n        this.sessionTime,\n        this.clientId\n      );\n      saveToken(accounts[0] as string, this.name, idToken);\n      return {\n        idToken,\n      };\n    }\n    throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n  }\n\n  async disconnect(): Promise<void> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.disconnectionError(\"Not connected with wallet\");\n    const accounts = await this.provider.request<string[]>({\n      method: \"getAccounts\",\n    });\n    if (accounts && accounts.length > 0) {\n      clearToken(accounts[0], this.name);\n    }\n  }\n}\n","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  getChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n  chainConfig?: CustomChainConfig;\n  sessionTime?: number;\n  clientId?: string;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  private rehydrated = false;\n\n  constructor(params: SolanaWalletOptions) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n    this.chainConfig = params.chainConfig || null;\n    this.sessionTime = params.sessionTime || 86400;\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions): Promise<void> {\n    super.checkInitializationRequirements();\n    // set chainConfig for mainnet by default if not set\n    let network: NetworkInterface;\n    if (!this.chainConfig) {\n      this.chainConfig = getChainConfig(CHAIN_NAMESPACES.SOLANA, \"0x1\");\n      const { blockExplorer, displayName, ticker, tickerName, rpcTarget, chainId } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, ticker, tickerName, logo: \"\" };\n    } else {\n      const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n      network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n    }\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await super.disconnect();\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n\n    this.emit(ADAPTER_EVENTS.DISCONNECTED);\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n\n  setAdapterSettings(options: { sessionTime?: number; clientId?: string }): void {\n    if (this.status === ADAPTER_STATUS.READY) return;\n    if (options?.sessionTime) {\n      this.sessionTime = options.sessionTime;\n    }\n    if (options?.clientId) {\n      this.clientId = options.clientId;\n    }\n  }\n}\n"],"names":["BaseSolanaAdapter","_inherits","params","arguments","_classCallCheck","_this","_defineProperty","clientId","_createClass","key","value","_authenticateUser","this","provider","chainConfig","chainId","_context","WalletLoginError","_this$chainConfig2","chainNamespace","status","ADAPTER_STATUS","request","method","accounts","length","existingToken","getSavedToken","name","checkIfTokenIsExpired","idToken","payload","domain","window","location","origin","uri","href","address","parseInt","version","nonce","Math","random","toString","slice","issuedAt","Date","toISOString","signChallenge","challenge","encodedMessage","TextEncoder","encode","message","display","signedMessage","verifySignedChallenge","bs58","sessionTime","saveToken","_disconnect","_context2","clearToken","BaseAdapter","SolanaWalletAdapter","WALLET_ADAPTERS","ADAPTER_NAMESPACES","CHAIN_NAMESPACES","ADAPTER_CATEGORY","torusWalletOptions","adapterSettings","initParams","loginSettings","get","solanaProvider","_this$solanaProvider","set","_","Error","options","_get","blockExplorer","displayName","rpcTarget","ticker","tickerName","network","blockExplorerUrl","logo","getChainConfig","_this$chainConfig","torusInstance","Torus","log","init","showTorusButton","TorusInjectedProvider","config","emit","ADAPTER_EVENTS","autoConnect","rehydrated","connect","_connect","WalletInitializationError","adapter","login","torusInpageProvider","sendTransaction","bind","signAllTransactions","signMessage","signTransaction","setupProvider","Web3AuthError","code","_this$chainConfig3","setProvider","reconnected","_args3","cleanup","_context3","logout","_getUserInfo","_context4","getUserInfo","userInfo"],"sourceRoot":""}